{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:3000/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          })\n        });\n        var data = yield response.json();\n        if (data.success) {\n          console.log('Login successful');\n        } else {\n          console.error('Login failed:', data.message);\n        }\n      } catch (error) {\n        console.error('Error during login:', error);\n      }\n    });\n    return function handleLogin() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: require(\"../assets/images/logo.png\"),\n      style: styles.logo\n    }), _jsx(View, {\n      style: styles.titleContainer\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Username\",\n      placeholderTextColor: \"#A9A9A9\",\n      onChangeText: function onChangeText(text) {\n        return setUsername(text);\n      },\n      value: username\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Password\",\n      placeholderTextColor: \"#A9A9A9\",\n      secureTextEntry: true,\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      },\n      value: password\n    }), _jsx(TouchableOpacity, {\n      onPress: handleLogin,\n      style: styles.button,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Login\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#090909',\n    padding: 16\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    marginBottom: 20\n  },\n  logo: {\n    position: 'absolute',\n    top: 140,\n    width: 200,\n    height: 50,\n    resizeMode: \"contain\"\n  },\n  input: {\n    height: 40,\n    width: '80%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 20,\n    padding: 10,\n    borderRadius: 5\n  },\n  button: {\n    backgroundColor: 'red',\n    padding: 20,\n    width: '80%',\n    borderRadius: 5\n  },\n  buttonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","Text","Image","TextInput","StyleSheet","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","handleLogin","_ref","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","data","json","success","console","log","error","message","apply","arguments","style","styles","container","children","source","require","logo","titleContainer","input","placeholder","placeholderTextColor","onChangeText","text","value","secureTextEntry","onPress","button","buttonText","create","flex","width","justifyContent","alignItems","backgroundColor","padding","flexDirection","marginBottom","position","top","height","resizeMode","borderColor","borderWidth","borderRadius","color","textAlign","fontWeight"],"sources":["C:/Users/Roey Ben Harush/Desktop/Roey/ShenkarSE/4th year (third)/שיטות בהנדסת תוכנה/EM/EMSQUAD/EMSquad/component/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, Image, TextInput, StyleSheet, TouchableOpacity } from 'react-native';\r\n\r\nconst LoginScreen = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (data.success) {\r\n        console.log('Login successful');\r\n      } else {\r\n        console.error('Login failed:', data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Image source={require(\"../assets/images/logo.png\")} style={styles.logo} />\r\n      <View style={styles.titleContainer}>\r\n      </View>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Username\"\r\n        placeholderTextColor=\"#A9A9A9\"\r\n        onChangeText={(text) => setUsername(text)}\r\n        value={username}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Password\"\r\n        placeholderTextColor=\"#A9A9A9\"\r\n        secureTextEntry\r\n        onChangeText={(text) => setPassword(text)}\r\n        value={password}\r\n      />\r\n      <TouchableOpacity onPress={handleLogin} style={styles.button}>\r\n        <Text style={styles.buttonText}>Login</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#090909',\r\n    padding: 16,\r\n  },\r\n  titleContainer: {\r\n    flexDirection: 'row',\r\n    marginBottom: 20,\r\n  },\r\n  logo: {\r\n    position: 'absolute',\r\n    top: 140,\r\n    width: 200,\r\n    height: 50,\r\n    resizeMode: \"contain\",\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: '80%',\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 20,\r\n    padding: 10,\r\n    borderRadius: 5,\r\n  },\r\n  button: {\r\n    backgroundColor: 'red',\r\n    padding: 20,\r\n    width: '80%',\r\n    borderRadius: 5,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}